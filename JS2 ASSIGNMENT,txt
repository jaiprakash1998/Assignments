JAVASCRIPT ASSIGNMENT

1. Make a function called composedValue that takes two functions f1 and f2 and a value and returns f1(f2(value)), i.e., the first function called on the result of the second function called on the value.

<!DOCTYPE html>
<html><head>
	<title>javascript</title></head>
<body>
	<script type="text/javascript">
		function square(x) { return(x*x); }
		function double(x) { return(x*2); }
		function composedValue(square,double,x){
			return square(double(x)); }
		document.write(square(double(5)));
	</script></body></html>

2. Make a function called compose that takes two functions f1 and f2 and returns a new function that, when called on a value, will return f1(f2(value)). Assume that f1 and f2 each take exactly one argument. 

<!DOCTYPE html>
<html>
<head><title>javascript</title></head>
<body>
	<script type="text/javascript">
		function square(x) { return(x*x); }
		function double(x) { return(x*2); }
		function composedValue(square,double,x){
			return square(double(x));	 
		}
		document.write(square(double(5)));
	</script></body></html>

3. Make a function called “find” that takes an array and a test function, and returns the first element of the array that “passes” (returns non-false for) the test. Don’t use map, filter, or reduce.

<!DOCTYPE html>
<html>
<head>
	<title>javascript</title>
</head>
<body>
	<script type="text/javascript">
		function isEven(num){ return (num%2==0);}
		var a=[1,2,3,4,5];
		function find(ar){
			for (var i = 0; i <= ar.length; i++) {
				if(isEven(ar[i])==true){return ar[i];} } }
		document.write(find(a));	</script></body></html>


4. Recent JavaScript versions added the “map” method of arrays, as we saw in the notes and used in the previous set of exercises. But, in earlier JavaScript versions, you had to write it yourself. Make a function called “map” that takes an array and a function, and returns a new array that is the result of calling the function on each element of the input array. Don’t use map, filter, or reduce.

<!DOCTYPE html>
<html>
<head>
	<title>javascript</title>
</head>
<body>
	<script type="text/javascript">
		function square(num){ return num*num;}
		var a=[1,2,3,4,5];
		var b= [];
		function find(ar){
			for (var i = 0; i < ar.length; i++) {
				b.push(square(ar[i]));
			}
			return b;
		}
		document.write(find(a));
	</script></body></html>


Functional Programming: Advanced Exercises

1. Make a “pure” recursive version of find. That is, don’t use any explicit loops (e.g. for loops or the forEach method), and don’t use any local variables (e.g., var x = ...) inside the functions. Hint: remember the slice method of arrays. 

<!DOCTYPE html>
<html>
<head>
	<title>javascript</title>
</head>
<body>
	<script type="text/javascript">
		var n=[1,2,3,4,5];
		function even(num){return (num%2==0);}
		function find(){return (even(n.slice());}		
		document.write(find());
	</script>
</body>
</html>

2. Make a “pure” recursive version of map. Hint: remember the slice and concat methods of arrays


